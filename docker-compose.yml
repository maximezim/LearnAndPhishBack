services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: authentication_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=authentication_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: fluent-bit:24224

  authentication-service:
    image: authentication-service:latest
    build:
      context: ./authentication
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authentication_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: fluent-bit:24224

  api-gateway:
    image: api-gateway:latest
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - authentication-service
    environment:
      - SPRING_CLOUD_GATEWAY_ROUTES[0].ID=auth-service
      - SPRING_CLOUD_GATEWAY_ROUTES[0].URI=http://authentication-service:8082
      - SPRING_CLOUD_GATEWAY_ROUTES[0].PREDICATES[0]=Path=/authenticate
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: fluent-bit:24224

  loki:
    image: grafana/loki:latest
    expose:
      - "3100"
    networks:
      - backend

  fluent-bit:
    environment:
      LOG_LEVEL: debug
      LOKI_URL: http://loki:3100/loki/api/v1/push # log datastore
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    networks:
      - backend
  renderer:
    image: grafana/grafana-image-renderer:latest
    expose:
      - "8081"
    environment:
      ENABLE_METRICS: "true"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
